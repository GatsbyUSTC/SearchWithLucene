#!/bin/bash
pushd `dirname $0` > /dev/null
SCRIPTPATH=`pwd`
popd > /dev/null

usage(){
    echo "$(basename $0) [-d|--debug|-i|--info|-w|--warn|-e|--error] [-c|--config config_file]"
}

start_serv(){
    python $BASEDIR/service_base.py --$1 --log-format "%(asctime)s %(module)s(%(lineno)d) %(levelname)s %(funcName)s %(threadName)s: %(message)s" --show-warnings --config-file $SCRIPTPATH/$2 &
}

wait_all(){
    pids=`jobs -p`
    proc_shut=0
    while :; do
        for pid in ${pids[@]}; do
            if kill -0 "$pid" 2>/dev/null; then
                proc_shut=0
            else
                wait $pid
                proc_shut=1
                echo '--------------------server shutdown--------------------'
            fi
        done
        (($proc_shut < 1)) || break
        sleep 1
    done
    for pid in `jobs -p`; do
        if kill -0 $pid 2>/dev/null; then
            echo kill process $pid
            kill -2 $pid 2>/dev/null
        fi
    done
    echo "-------------wait for servers to shutdown--------------"
    for pid in `jobs -p`; do
        wait $pid
    done
}

kill_all_force(){
    echo "----------------send force kill signal-----------------"
    for pid in `jobs -p`; do
        kill -9 $pid 2>/dev/null;
    done;
    echo "-------------wait for servers to shutdown--------------"
    for pid in `jobs -p`; do
        wait $pid
    done
}

kill_all(){
    trap "kill_all_force" SIGHUP SIGINT SIGTERM
    echo "-------------------send stop signal--------------------"
    for pid in `jobs -p`; do
        kill -2 $pid 2>/dev/null;
    done;
    echo "-------------wait for servers to shutdown--------------"
    for pid in `jobs -p`; do
        wait $pid
    done
}

BASEDIR=`dirname $SCRIPTPATH`

LEVEL='info'
declare -a CONFIG_FILE=();

while [ "$1" != "" ]; do
    case $1 in
        -d | --debug )      LEVEL='debug'
                            ;;
        -i | --info )       LEVEL='info'
                            ;;
        -w | --warn )       LEVEL='warn'
                            ;;
        -e | --error )      LEVEL='error'
                            ;;
        -c | --config )     shift
                            CONFIG_FILE=("${CONFIG_FILE[@]}" "$1")
                            ;;
        * )                 usage
                            exit 1
    esac
    shift
done

if [ ${#CONFIG_FILE[@]} -lt 1 ]; then
    CONFIG_FILE=('config.json')
fi

trap "kill_all" SIGHUP SIGINT SIGTERM

for config in ${CONFIG_FILE[@]}; do
    start_serv ${LEVEL} ${config}
    pid=$!
    sleep 1
    if ! kill -0 ${pid} 2>/dev/null; then
        echo '-----------------failed to start server-----------------'
        break
    fi
done;
wait_all
